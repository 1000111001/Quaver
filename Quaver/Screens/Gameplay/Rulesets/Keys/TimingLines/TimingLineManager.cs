using Quaver.API.Maps;
using System;
using System.Collections.Generic;
using System.Text;

namespace Quaver.Screens.Gameplay.Rulesets.Keys.TimingLines
{
    public class TimingLineManager
    {
        /// <summary>
        ///     Timing Line object pool.
        /// </summary>
        private Queue<TimingLineObject> Pool { get; set; }

        /// <summary>
        ///     Timing Line information. Generated by this class with qua object.
        /// </summary>
        private Queue<TimingLineInfo> Info { get; set; }

        /// <summary>
        ///     Reference to the ruleset this HitObject manager is for.
        /// </summary>
        public GameplayRulesetKeys Ruleset { get; }

        /// <summary>
        ///     Initial size for the object pool
        /// </summary>
        private int InitialPoolSize { get; } = 6;

        /// <summary>
        ///     The position at which the next TimingLine must be at in order to add a new TimingLine object to the pool.
        /// </summary>
        private float CreateObjectPosition { get; set; }

        /// <summary>
        ///     The position at which the earliest TimingLine object must be at before its recycled.
        /// </summary>
        private float RecycleObjectPosition { get; set; }

        /// <summary>
        ///     The Timing Line's Y-Offset. Is calculated by skin hit object element Y size and hit position.
        /// </summary>
        private float ObjectYOffset { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="map"></param>
        /// <param name="ruleset"></param>
        public TimingLineManager(Qua map, GameplayRulesetKeys ruleset)
        {
            Ruleset = ruleset;
            GenerateTimingLineInfo(map);
            InitializeObjectPool();
        }

        /// <summary>
        ///     Generate Timing Line Information for the map
        /// </summary>
        /// <param name="map"></param>
        private void GenerateTimingLineInfo(Qua map)
        {
            Info = new Queue<TimingLineInfo>();
            float songPos = 0;
            var index = 0;

            // set initial increment that will update songPos by 4 beat lengths
            // todo: use constant variables
            var increment = (4 * 60 * 1000) / map.TimingPoints[index].Bpm;
            while (songPos < map.Length)
            {
                // Update songpos with increment
                songPos += increment;

                // If songPos exceeds the next timing point (if next timing point exists):
                // Reset songPos to the next timing point and update increment
                // subtract Timing Point StartTime by 1 to add more tolerance when finding next Timing Point
                if (index + 1 < map.TimingPoints.Count && songPos >= map.TimingPoints[index + 1].StartTime - 1)
                {
                    index++;
                    songPos = map.TimingPoints[index].StartTime;
                    increment = (4 * 60 * 1000) / map.TimingPoints[index].Bpm;
                }

                var offset = Ruleset.Screen.Positioning.GetPositionFromTime(songPos);
                var info = new TimingLineInfo(songPos, offset);
                Info.Enqueue(info);
            }
        }

        /// <summary>
        ///     Initialize the Timing Line Object Pool
        /// </summary>
        private void InitializeObjectPool()
        {
            // Initialize pool
            Pool = new Queue<TimingLineObject>();

            // Create pool objects equal to the initial pool size or total objects that will be displayed on screen initially
            for (var i = 0; i < Info.Count && (i < InitialPoolSize || Info.Peek().OffsetYFromReceptor < CreateObjectPosition); i++)
            {
                var info = Info.Dequeue();
                CreatePoolObject(info);
            }
        }

        /// <summary>
        ///     Update every object in the Timing Line Object Pool and create new objects if necessary
        /// </summary>
        public void UpdateObjectPool()
        {
            // Update line positions
            foreach (var line in Pool)
            {
                line.UpdateSpritePosition(Ruleset.Screen.Positioning.Position);
            }

            // Recycle necessary pool objects
            while (Pool.Count > 0 && Pool.Peek().PositionY < RecycleObjectPosition)
            {
                var line = Pool.Dequeue();
                if (Info.Count > 0)
                {
                    line.Info = Info.Dequeue();
                    line.UpdateSpritePosition(Ruleset.Screen.Positioning.Position);
                    Pool.Enqueue(line);
                }
            }

            // Create new pool objects if they are in range
            while (Info.Count > 0 && Info.Peek().OffsetYFromReceptor < CreateObjectPosition)
            {
                var info = Info.Dequeue();
                CreatePoolObject(info);
            }
        }

        /// <summary>
        ///     Create and add new Timing Line Object to the Object Pool
        /// </summary>
        /// <param name="info"></param>
        private void CreatePoolObject(TimingLineInfo info)
        {
            var line = new TimingLineObject(Ruleset, info);
            line.UpdateSpritePosition(Ruleset.Screen.Positioning.Position);
            Pool.Enqueue(line);
        }
    }
}
